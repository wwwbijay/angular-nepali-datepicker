{"version":3,"file":"tsconfig.js","sourceRoot":"","sources":["../../../src/lib/ts/tsconfig.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA,2CAA6B;AAC7B,4DAA4B;AAE5B,kDAAoC;AACpC,sCAAoC;AACpC,8DAAyD;AAE5C,QAAA,mBAAmB,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,mBAAmB,CAAC,CAAC;AACrF;;GAEG;AACH,KAAK,UAAU,mBAAmB,CAAC,QAAQ,GAAG,2BAAmB;IAC/D,8BAA8B;IAC9B,MAAM,YAAY,GAAoB;QACpC,gBAAgB,EAAE,oBAAE,CAAC,oBAAoB,CAAC,MAAM;QAChD,MAAM,EAAE,oBAAE,CAAC,YAAY,CAAC,MAAM;QAC9B,sBAAsB,EAAE,IAAI;QAE5B,aAAa;QACb,SAAS,EAAE,KAAK;QAChB,aAAa,EAAE,IAAI;QACnB,eAAe,EAAE,IAAI;QAErB,MAAM,EAAE,EAAE;QACV,WAAW,EAAE,IAAI;QAEjB,yBAAyB;QACzB,sBAAsB,EAAE,IAAI;QAE5B,sDAAsD;QACtD,YAAY,EAAE,eAAe;QAC7B,iBAAiB,EAAE,eAAe;KACnC,CAAC;IAEF,MAAM,EAAE,iBAAiB,EAAE,GAAG,MAAM,IAAA,+BAAa,GAAE,CAAC;IAEpD,OAAO,iBAAiB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;AACnD,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,qBAAqB,CAAC,MAAqC;IACxE,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,mBAAmB,EAAE,CAAC;KAC9B;SAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QACrC,OAAO,mBAAmB,CAAC,MAAM,CAAC,CAAC;KACpC;SAAM;QACL,OAAO,MAAM,CAAC;KACf;AACH,CAAC;AAED;;;GAGG;AACI,KAAK,UAAU,kBAAkB,CACtC,eAAyD,EACzD,WAA6B;IAE7B,MAAM,qBAAqB,GAAG,MAAM,qBAAqB,CAAC,eAAe,CAAC,CAAC;IAC3E,IAAI,qBAAqB,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3C,MAAM,EAAE,iBAAiB,EAAE,GAAG,MAAM,IAAA,+BAAa,GAAE,CAAC;QACpD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC;KAClE;IAED,IAAI,qBAAqB,CAAC,OAAO,CAAC,SAAS,KAAK,KAAK,EAAE;QACrD,IAAA,UAAI,EACF,qDAAqD;YACnD,oFAAoF;YACpF,uDAAuD;YACvD,iGAAiG,CACpG,CAAC;QAEF,qBAAqB,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;QAC/C,qBAAqB,CAAC,OAAO,CAAC,eAAe,GAAG,SAAS,CAAC;KAC3D;IAED,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE;QACtC,MAAM,EAAE,UAAU,EAAE,GAAG,iBAAiB,CAAC,IAAI,CAAC;QAC9C,GAAG,CAAC,KAAK,CAAC,6BAA6B,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC9D,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QAExD,wEAAwE;QACxE,MAAM,QAAQ,GAAwB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;QACxF,MAAM,eAAe,GAAoB;YACvC,YAAY,EAAE,UAAU,CAAC,QAAQ;YACjC,iBAAiB,EAAE,GAAG,UAAU,CAAC,cAAc,KAAK;YACpD,QAAQ;YACR,OAAO,EAAE,QAAQ;YACjB,UAAU,EAAE,EAAE;SACf,CAAC;QAEF,QAAQ,CAAC,SAAS,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QAChD,QAAQ,CAAC,OAAO,GAAG,EAAE,GAAG,QAAQ,CAAC,OAAO,EAAE,GAAG,eAAe,EAAE,CAAC;QAC/D,iBAAiB,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC;AAzCD,gDAyCC;AAED;;;;;;;;;GASG;AACH,SAAgB,4BAA4B,CAC1C,cAAmC,EACnC,WAA6B,EAC7B,aAAa,GAAG,KAAK;IAErB,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;IAE5D,sCAAsC;IACtC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE;QAC3B,QAAQ,CAAC,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC;KAC7B;IAED,KAAK,MAAM,GAAG,IAAI,WAAW,EAAE;QAC7B,MAAM,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;QAChC,MAAM,EAAE,QAAQ,EAAE,gBAAgB,EAAE,aAAa,EAAE,GAAG,UAAU,CAAC;QACjE,MAAM,UAAU,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;QAEnF,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;YACrC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;SAC/C;aAAM;YACL,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,GAAG,UAAU,CAAC,CAAC;SACzD;KACF;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC;AAzBD,oEAyBC","sourcesContent":["import type { CompilerOptions, ParsedConfiguration } from '@angular/compiler-cli';\nimport * as path from 'path';\nimport ts from 'typescript';\nimport { EntryPointNode } from '../ng-package/nodes';\nimport * as log from '../utils/log';\nimport { warn } from '../utils/log';\nimport { ngCompilerCli } from '../utils/ng-compiler-cli';\n\nexport const defaultTsConfigPath = path.join(__dirname, 'conf', 'tsconfig.ngc.json');\n/**\n * Reads the default TypeScript configuration.\n */\nasync function readDefaultTsConfig(fileName = defaultTsConfigPath): Promise<ParsedConfiguration> {\n  // these options are mandatory\n  const extraOptions: CompilerOptions = {\n    moduleResolution: ts.ModuleResolutionKind.NodeJs,\n    target: ts.ScriptTarget.ES2020,\n    experimentalDecorators: true,\n\n    // sourcemaps\n    sourceMap: false,\n    inlineSources: true,\n    inlineSourceMap: true,\n\n    outDir: '',\n    declaration: true,\n\n    // ng compiler to options\n    enableResourceInlining: true,\n\n    // these are required to set the appropriate EmitFlags\n    flatModuleId: 'AUTOGENERATED',\n    flatModuleOutFile: 'AUTOGENERATED',\n  };\n\n  const { readConfiguration } = await ngCompilerCli();\n\n  return readConfiguration(fileName, extraOptions);\n}\n\n/**\n * Creates a parsed TypeScript configuration object.\n *\n * @param values File path or parsed configuration.\n */\nasync function createDefaultTsConfig(values?: ParsedConfiguration | string): Promise<ParsedConfiguration> {\n  if (!values) {\n    return readDefaultTsConfig();\n  } else if (typeof values === 'string') {\n    return readDefaultTsConfig(values);\n  } else {\n    return values;\n  }\n}\n\n/**\n * Initializes TypeScript Compiler options and Angular Compiler options by overriding the\n * default config with entry point-specific values.\n */\nexport async function initializeTsConfig(\n  defaultTsConfig: ParsedConfiguration | string | undefined,\n  entryPoints: EntryPointNode[],\n): Promise<void> {\n  const defaultTsConfigParsed = await createDefaultTsConfig(defaultTsConfig);\n  if (defaultTsConfigParsed.errors.length > 0) {\n    const { formatDiagnostics } = await ngCompilerCli();\n    throw new Error(formatDiagnostics(defaultTsConfigParsed.errors));\n  }\n\n  if (defaultTsConfigParsed.options.enableIvy === false) {\n    warn(\n      'Project is attempting to disable the Ivy compiler. ' +\n        'Angular versions 13 and higher do not support View Engine compiler for libraries. ' +\n        'The Ivy compiler will be used to build this project. ' +\n        '\\nFor additional information or if the build fails, please see https://v12.angular.io/guide/ivy',\n    );\n\n    defaultTsConfigParsed.options.enableIvy = true;\n    defaultTsConfigParsed.options.compilationMode = 'partial';\n  }\n\n  entryPoints.forEach(currentEntryPoint => {\n    const { entryPoint } = currentEntryPoint.data;\n    log.debug(`Initializing tsconfig for ${entryPoint.moduleId}`);\n    const basePath = path.dirname(entryPoint.entryFilePath);\n\n    // Resolve defaults from DI token and create a deep copy of the defaults\n    const tsConfig: ParsedConfiguration = JSON.parse(JSON.stringify(defaultTsConfigParsed));\n    const overrideOptions: CompilerOptions = {\n      flatModuleId: entryPoint.moduleId,\n      flatModuleOutFile: `${entryPoint.flatModuleFile}.js`,\n      basePath,\n      rootDir: basePath,\n      sourceRoot: '',\n    };\n\n    tsConfig.rootNames = [entryPoint.entryFilePath];\n    tsConfig.options = { ...tsConfig.options, ...overrideOptions };\n    currentEntryPoint.data.tsConfig = tsConfig;\n  });\n}\n\n/**\n * Set the paths for entrypoint dependencies.\n *\n * This doesn't mutate the object.\n *\n * @param parsedTsConfig - A parsed tsconfig\n * @param entryPoints - A list of entryPoints\n * @param pointToSource Point the path mapping to either the source code or emitted declarations.\n * Typically for analysis one should point to the source files while for a compilation once should use the emitted declarations\n */\nexport function setDependenciesTsConfigPaths(\n  parsedTsConfig: ParsedConfiguration,\n  entryPoints: EntryPointNode[],\n  pointToSource = false,\n): ParsedConfiguration {\n  const tsConfig = JSON.parse(JSON.stringify(parsedTsConfig));\n\n  // Add paths mappings for dependencies\n  if (!tsConfig.options.paths) {\n    tsConfig.options.paths = {};\n  }\n\n  for (const dep of entryPoints) {\n    const { entryPoint } = dep.data;\n    const { moduleId, destinationFiles, entryFilePath } = entryPoint;\n    const mappedPath = [pointToSource ? entryFilePath : destinationFiles.declarations];\n\n    if (!tsConfig.options.paths[moduleId]) {\n      tsConfig.options.paths[moduleId] = mappedPath;\n    } else {\n      tsConfig.options.paths[moduleId].unshift(...mappedPath);\n    }\n  }\n\n  return tsConfig;\n}\n"]}