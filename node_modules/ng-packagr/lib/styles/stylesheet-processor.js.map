{"version":3,"file":"stylesheet-processor.js","sourceRoot":"","sources":["../../../src/lib/styles/stylesheet-processor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gEAAwC;AACxC,2BAAgC;AAChC,+BAA8C;AAC9C,sDAA8B;AAC9B,4EAAkD;AAClD,8DAAqC;AACrC,kEAA8D;AAC9D,0CAA6E;AAC7E,kDAAoC;AAEpC,IAAY,MAGX;AAHD,WAAY,MAAM;IAChB,2BAAiB,CAAA;IACjB,uBAAa,CAAA;AACf,CAAC,EAHW,MAAM,GAAN,cAAM,KAAN,cAAM,QAGjB;AAED,IAAY,mBAKX;AALD,WAAY,mBAAmB;IAC7B,oCAAa,CAAA;IACb,oCAAa,CAAA;IACb,kCAAW,CAAA;IACX,oCAAa,CAAA;AACf,CAAC,EALW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAK9B;AAOD,MAAa,mBAAmB;IAO9B,YACmB,QAAgB,EAChB,MAAe,EACf,YAAuB,EACvB,cAA+B;QAH/B,aAAQ,GAAR,QAAQ,CAAQ;QAChB,WAAM,GAAN,MAAM,CAAS;QACf,iBAAY,GAAZ,YAAY,CAAW;QACvB,mBAAc,GAAd,cAAc,CAAiB;QAP1C,YAAO,GAAG,IAAI,kCAAe,EAAE,CAAC;QAStC,GAAG,CAAC,KAAK,CAAC,8BAA8B,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACzD,sDAAsD;QACtD,gHAAgH;QAEhH,gEAAgE;QAChE,2CAA2C;QAC1C,sBAAY,CAAC,QAAqB,GAAG;YACpC,uBAAuB;YACvB,wBAAwB;YACxB,4BAA4B;YAC5B,8BAA8B;YAC9B,2BAA2B;YAC3B,aAAa;SACd,CAAC;QAEF,IAAI,CAAC,iBAAiB,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;QAChD,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,IAAI,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE/B,OAAO,UAAU,KAAK,OAAO,EAAE;YAC7B,MAAM,CAAC,GAAG,IAAA,WAAI,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC;YAC3C,IAAI,IAAA,eAAU,EAAC,CAAC,CAAC,EAAE;gBACjB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAChC;YAED,OAAO,GAAG,UAAU,CAAC;YACrB,UAAU,GAAG,IAAA,cAAO,EAAC,OAAO,CAAC,CAAC;SAC/B;QAED,IAAI,CAAC,gBAAgB,GAAG,IAAA,sBAAY,EAAC,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACzE,IAAI,CAAC,OAAO,GAAG,mCAAmC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC1E,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;IACtD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAyC;QACxE,IAAI,GAAuB,CAAC;QAE5B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,cAAc,EAAE;YACpF,sDAAsD;YACtD,GAAG,GAAG,MAAM,IAAA,mBAAW,EAAC,OAAO,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAC3D,MAAM,MAAM,GAAG,MAAM,IAAA,sBAAc,EAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YAC9D,IAAI,MAAM,EAAE;gBACV,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gBAE9C,OAAO,MAAM,CAAC,GAAG,CAAC;aACnB;SACF;QAED,mDAAmD;QACnD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAE5D,uHAAuH;QACvH,gDAAgD;QAChD,IAAI,CAAC,GAAG,EAAE;YACR,GAAG,GAAG,MAAM,IAAA,mBAAW,EAAC,WAAW,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAChE;QAED,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,MAAM,YAAY,GAAG,MAAM,IAAA,sBAAc,EAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YACpE,IAAI,YAAY,EAAE;gBAChB,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gBAEpD,OAAO,YAAY,CAAC,GAAG,CAAC;aACzB;SACF;QACD,6CAA6C;QAC7C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,WAAW,EAAE;YAC9D,IAAI,EAAE,QAAQ;YACd,EAAE,EAAE,QAAQ,CAAC,OAAO,CAAC,IAAA,cAAO,EAAC,QAAQ,CAAC,EAAE,MAAM,CAAC;SAChD,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC1D,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE;YACnF,MAAM,EAAE,KAAK;YACb,MAAM,EAAE,IAAI;YACZ,MAAM,EAAE,IAAI,CAAC,OAAO;YACpB,UAAU,EAAE,QAAQ;SACrB,CAAC,CAAC;QAEH,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;YAC9B,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;SAC7F;QAED,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,MAAM,IAAA,sBAAc,EAClB,IAAI,CAAC,cAAc,EACnB,GAAG,EACH,IAAI,CAAC,SAAS,CAAC;gBACb,GAAG,EAAE,IAAI;gBACT,QAAQ;aACT,CAAC,CACH,CAAC;SACH;QACD,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAEvC,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,oBAAoB;QAC1B,MAAM,cAAc,GAAG,EAAE,CAAC;QAC1B,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,EAAE;YAC/B,cAAc,CAAC,IAAI,CAAC,IAAA,qBAAU,EAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;SACvD;QAED,cAAc,CAAC,IAAI,CACjB,IAAA,4BAAgB,EAAC;YACf,QAAQ,EAAE,IAAI,CAAC,gBAAgB;YAC/B,YAAY,EAAE,IAAI;YAClB,KAAK,EAAE,CAAC;SACT,CAAC,CACH,CAAC;QAEF,OAAO,IAAA,iBAAO,EAAC,cAAc,CAAC,CAAC;IACjC,CAAC;IAEO,KAAK,CAAC,SAAS,CAAC,QAAgB,EAAE,GAAW;QACnD,MAAM,GAAG,GAAG,IAAA,cAAO,EAAC,QAAQ,CAAC,CAAC;QAE9B,QAAQ,GAAG,EAAE;YACX,KAAK,OAAO,CAAC;YACb,KAAK,OAAO,CAAC,CAAC;gBACZ,OAAO,CAAC,wDAAa,MAAM,GAAC,CAAC;qBAC1B,UAAU,CAAC;oBACV,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,GAAG;oBACT,cAAc,EAAE,OAAO,KAAK,GAAG;oBAC/B,QAAQ,EAAE,kBAAkB;oBAC5B,YAAY,EAAE,IAAI,CAAC,iBAAiB;iBACrC,CAAC;qBACD,GAAG,CAAC,QAAQ,EAAE,CAAC;aACnB;YACD,KAAK,OAAO,CAAC,CAAC;gBACZ,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,MAAM,CAC7B,wDAAa,MAAM,GAAC,CACrB,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE;oBACpB,QAAQ,EAAE,QAAQ;oBAClB,IAAI,EAAE,QAAQ;oBACd,iBAAiB,EAAE,IAAI;oBACvB,KAAK,EAAE,IAAI,CAAC,iBAAiB;iBAC9B,CAAC,CAAC;gBAEH,OAAO,OAAO,CAAC;aAChB;YACD,KAAK,OAAO,CAAC;YACb,KAAK,SAAS,CAAC,CAAC;gBACd,MAAM,MAAM,GAAG,CAAC,wDAAa,QAAQ,GAAC,CAAC,CAAC,OAAO,CAAC;gBAEhD,OAAO,CACL,MAAM,CAAC,GAAG,CAAC;oBACT,wBAAwB;qBACvB,GAAG,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAC;oBAC9E,sDAAsD;qBACrD,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC;oBAC1B,6DAA6D;qBAC5D,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC;qBACxB,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;qBACzC,MAAM,EAAE,CACZ,CAAC;aACH;YACD,KAAK,MAAM,CAAC;YACZ;gBACE,OAAO,GAAG,CAAC;SACd;IACH,CAAC;CACF;AAjLD,kDAiLC;AAED,SAAS,mCAAmC,CAAC,iBAA2B;IACtE,MAAM,WAAW,GAAa,EAAE,CAAC;IAEjC,wCAAwC;IACxC,MAAM,wBAAwB,GAAG,IAAI,GAAG,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;IAEzF,KAAK,MAAM,OAAO,IAAI,iBAAiB,EAAE;QACvC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEhD,iFAAiF;QACjF,IAAI,WAAW,KAAK,SAAS,EAAE;YAC7B,WAAW,GAAG,KAAK,CAAC;SACrB;QAED,gFAAgF;QAChF,sFAAsF;QACtF,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE/B,IAAI,wBAAwB,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE;YAC7C,IAAI,WAAW,KAAK,QAAQ,IAAI,OAAO,KAAK,IAAI,EAAE;gBAChD,2FAA2F;gBAC3F,0FAA0F;gBAC1F,OAAO,GAAG,KAAK,CAAC;aACjB;YAED,WAAW,CAAC,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC;SACzC;KACF;IAED,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;AACtD,CAAC;AAED,SAAS,kBAAkB,CAAC,GAAW,EAAE,IAAY;IACnD,qEAAqE;IACrE,gDAAgD;IAChD,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAClB,OAAO,SAAS,CAAC;KAClB;IAED,OAAO;QACL,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;QACnB,IAAI;KACL,CAAC;AACJ,CAAC","sourcesContent":["import browserslist from 'browserslist';\nimport { existsSync } from 'fs';\nimport { dirname, extname, join } from 'path';\nimport postcss from 'postcss';\nimport postcssPresetEnv from 'postcss-preset-env';\nimport postcssUrl from 'postcss-url';\nimport { EsbuildExecutor } from '../esbuild/esbuild-executor';\nimport { generateKey, readCacheEntry, saveCacheEntry } from '../utils/cache';\nimport * as log from '../utils/log';\n\nexport enum CssUrl {\n  inline = 'inline',\n  none = 'none',\n}\n\nexport enum InlineStyleLanguage {\n  sass = 'sass',\n  scss = 'scss',\n  css = 'css',\n  less = 'less',\n}\n\nexport interface Result {\n  css: string;\n  warnings: string[];\n  error?: string;\n}\nexport class StylesheetProcessor {\n  private browserslistData: string[];\n  private targets: string[];\n  private postCssProcessor: ReturnType<typeof postcss>;\n  private esbuild = new EsbuildExecutor();\n  private styleIncludePaths: string[];\n\n  constructor(\n    private readonly basePath: string,\n    private readonly cssUrl?: CssUrl,\n    private readonly includePaths?: string[],\n    private readonly cacheDirectory?: string | false,\n  ) {\n    log.debug(`determine browserslist for ${this.basePath}`);\n    // By default, browserslist defaults are too inclusive\n    // https://github.com/browserslist/browserslist/blob/83764ea81ffaa39111c204b02c371afa44a4ff07/index.js#L516-L522\n\n    // We change the default query to browsers that Angular support.\n    // https://angular.io/guide/browser-support\n    (browserslist.defaults as string[]) = [\n      'last 1 Chrome version',\n      'last 1 Firefox version',\n      'last 2 Edge major versions',\n      'last 2 Safari major versions',\n      'last 2 iOS major versions',\n      'Firefox ESR',\n    ];\n\n    this.styleIncludePaths = [...this.includePaths];\n    let prevDir = null;\n    let currentDir = this.basePath;\n\n    while (currentDir !== prevDir) {\n      const p = join(currentDir, 'node_modules');\n      if (existsSync(p)) {\n        this.styleIncludePaths.push(p);\n      }\n\n      prevDir = currentDir;\n      currentDir = dirname(prevDir);\n    }\n\n    this.browserslistData = browserslist(undefined, { path: this.basePath });\n    this.targets = transformSupportedBrowsersToTargets(this.browserslistData);\n    this.postCssProcessor = this.createPostCssPlugins();\n  }\n\n  async process({ filePath, content }: { filePath: string; content: string }): Promise<string> {\n    let key: string | undefined;\n\n    if (!content.includes('@import') && !content.includes('@use') && this.cacheDirectory) {\n      // No transitive deps, we can cache more aggressively.\n      key = await generateKey(content, ...this.browserslistData);\n      const result = await readCacheEntry(this.cacheDirectory, key);\n      if (result) {\n        result.warnings.forEach(msg => log.warn(msg));\n\n        return result.css;\n      }\n    }\n\n    // Render pre-processor language (sass, styl, less)\n    const renderedCss = await this.renderCss(filePath, content);\n\n    // We cannot cache CSS re-rendering phase, because a transitive dependency via (@import) can case different CSS output.\n    // Example a change in a mixin or SCSS variable.\n    if (!key) {\n      key = await generateKey(renderedCss, ...this.browserslistData);\n    }\n\n    if (this.cacheDirectory) {\n      const cachedResult = await readCacheEntry(this.cacheDirectory, key);\n      if (cachedResult) {\n        cachedResult.warnings.forEach(msg => log.warn(msg));\n\n        return cachedResult.css;\n      }\n    }\n    // Render postcss (autoprefixing and friends)\n    const result = await this.postCssProcessor.process(renderedCss, {\n      from: filePath,\n      to: filePath.replace(extname(filePath), '.css'),\n    });\n\n    const warnings = result.warnings().map(w => w.toString());\n    const { code, warnings: esBuildWarnings } = await this.esbuild.transform(result.css, {\n      loader: 'css',\n      minify: true,\n      target: this.targets,\n      sourcefile: filePath,\n    });\n\n    if (esBuildWarnings.length > 0) {\n      warnings.push(...(await this.esbuild.formatMessages(esBuildWarnings, { kind: 'warning' })));\n    }\n\n    if (this.cacheDirectory) {\n      await saveCacheEntry(\n        this.cacheDirectory,\n        key,\n        JSON.stringify({\n          css: code,\n          warnings,\n        }),\n      );\n    }\n    warnings.forEach(msg => log.warn(msg));\n\n    return code;\n  }\n\n  private createPostCssPlugins(): ReturnType<typeof postcss> {\n    const postCssPlugins = [];\n    if (this.cssUrl !== CssUrl.none) {\n      postCssPlugins.push(postcssUrl({ url: this.cssUrl }));\n    }\n\n    postCssPlugins.push(\n      postcssPresetEnv({\n        browsers: this.browserslistData,\n        autoprefixer: true,\n        stage: 3,\n      }),\n    );\n\n    return postcss(postCssPlugins);\n  }\n\n  private async renderCss(filePath: string, css: string): Promise<string> {\n    const ext = extname(filePath);\n\n    switch (ext) {\n      case '.sass':\n      case '.scss': {\n        return (await import('sass'))\n          .renderSync({\n            file: filePath,\n            data: css,\n            indentedSyntax: '.sass' === ext,\n            importer: customSassImporter,\n            includePaths: this.styleIncludePaths,\n          })\n          .css.toString();\n      }\n      case '.less': {\n        const { css: content } = await (\n          await import('less')\n        ).default.render(css, {\n          filename: filePath,\n          math: 'always',\n          javascriptEnabled: true,\n          paths: this.styleIncludePaths,\n        });\n\n        return content;\n      }\n      case '.styl':\n      case '.stylus': {\n        const stylus = (await import('stylus')).default;\n\n        return (\n          stylus(css)\n            // add paths for resolve\n            .set('paths', [this.basePath, '.', ...this.styleIncludePaths, 'node_modules'])\n            // add support for resolving plugins from node_modules\n            .set('filename', filePath)\n            // turn on url resolver in stylus, same as flag --resolve-url\n            .set('resolve url', true)\n            .define('url', stylus.resolver(undefined))\n            .render()\n        );\n      }\n      case '.css':\n      default:\n        return css;\n    }\n  }\n}\n\nfunction transformSupportedBrowsersToTargets(supportedBrowsers: string[]): string[] {\n  const transformed: string[] = [];\n\n  // https://esbuild.github.io/api/#target\n  const esBuildSupportedBrowsers = new Set(['safari', 'firefox', 'edge', 'chrome', 'ios']);\n\n  for (const browser of supportedBrowsers) {\n    let [browserName, version] = browser.split(' ');\n\n    // browserslist uses the name `ios_saf` for iOS Safari whereas esbuild uses `ios`\n    if (browserName === 'ios_saf') {\n      browserName = 'ios';\n    }\n\n    // browserslist uses ranges `15.2-15.3` versions but only the lowest is required\n    // to perform minimum supported feature checks. esbuild also expects a single version.\n    [version] = version.split('-');\n\n    if (esBuildSupportedBrowsers.has(browserName)) {\n      if (browserName === 'safari' && version === 'TP') {\n        // esbuild only supports numeric versions so `TP` is converted to a high number (999) since\n        // a Technology Preview (TP) of Safari is assumed to support all currently known features.\n        version = '999';\n      }\n\n      transformed.push(browserName + version);\n    }\n  }\n\n  return transformed.length ? transformed : undefined;\n}\n\nfunction customSassImporter(url: string, prev: string): { file: string; prev: string } | undefined {\n  // NB: Sass importer should always be sync as otherwise it will cause\n  // sass to go in the async path which is slower.\n  if (url[0] !== '~') {\n    return undefined;\n  }\n\n  return {\n    file: url.substr(1),\n    prev,\n  };\n}\n"]}