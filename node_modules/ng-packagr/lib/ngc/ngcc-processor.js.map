{"version":3,"file":"ngcc-processor.js","sourceRoot":"","sources":["../../../src/lib/ngc/ngcc-processor.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Logger } from '@angular/compiler-cli/ngcc';\nimport { spawnSync } from 'child_process';\nimport { createHash } from 'crypto';\nimport { accessSync, constants, existsSync } from 'fs';\nimport * as path from 'path';\nimport ts from 'typescript';\nimport { NgccProcessingCache } from '../ng-package/ngcc-cache';\nimport { EntryPointNode, ngUrl } from '../ng-package/nodes';\nimport { defaultTsConfigPath } from '../ts/tsconfig';\nimport { exists, mkdir, readFile, writeFile } from '../utils/fs';\nimport * as log from '../utils/log';\n\n// Transform a package and its typings when NGTSC is resolving a module.\nexport class NgccProcessor {\n  private _logger: NgccLogger;\n  private _nodeModulesDirectory: string;\n  private _entryPointsUrl: string[];\n  private readonly propertiesToConsider = ['es2015', 'browser', 'module', 'main'];\n  private skipProcessing = false;\n\n  constructor(\n    private readonly compilerNgcc: typeof import('@angular/compiler-cli/ngcc'),\n    private readonly ngccProcessingCache: NgccProcessingCache,\n    private readonly projectPath: string,\n    private readonly compilerOptions: ts.CompilerOptions,\n    private readonly entryPoints: EntryPointNode[],\n  ) {\n    this._entryPointsUrl = this.entryPoints.map(({ url }) => ngUrl(url));\n\n    const { baseUrl } = this.compilerOptions;\n    this._nodeModulesDirectory = this.findNodeModulesDirectory(baseUrl);\n  }\n\n  /** Process the entire node modules tree. */\n  async process(): Promise<void> {\n    // Under Bazel when running in sandbox mode parts of the filesystem is read-only.\n    if (process.env.BAZEL_TARGET) {\n      return;\n    }\n\n    // Only allow running this during the first run.\n    if (this.skipProcessing) {\n      return;\n    }\n\n    // Skip if node_modules are read-only\n    const corePackage = this.tryResolvePackage('@angular/core', this._nodeModulesDirectory);\n    if (corePackage && isReadOnlyFile(corePackage)) {\n      return;\n    }\n\n    // Perform a ngcc run check to determine if an initial execution is required.\n    // If a run hash file exists that matches the current package manager lock file and the\n    // project's tsconfig, then an initial ngcc run has already been performed.\n    let runHashFilePath: string | undefined;\n    const runHashBasePath = path.join(this._nodeModulesDirectory, '.ng-packagr-ngcc');\n    const projectBasePath = path.join(this._nodeModulesDirectory, '..');\n    try {\n      let lockData;\n      let lockFile = 'yarn.lock';\n      try {\n        lockData = await readFile(path.join(projectBasePath, lockFile));\n      } catch {\n        lockFile = 'package-lock.json';\n        lockData = await readFile(path.join(projectBasePath, lockFile));\n      }\n\n      let ngccConfigData;\n      try {\n        ngccConfigData = await readFile(path.join(projectBasePath, 'ngcc.config.js'));\n      } catch {\n        ngccConfigData = '';\n      }\n\n      const relativeTsconfigPath = path.relative(projectBasePath, this.projectPath);\n      const tsconfigData = await readFile(this.projectPath);\n\n      // Generate a hash that represents the state of the package lock file and used tsconfig\n      const runHash = createHash('sha256')\n        .update(lockData)\n        .update(lockFile)\n        .update(ngccConfigData)\n        .update(tsconfigData)\n        .update(relativeTsconfigPath)\n        .digest('hex');\n\n      // The hash is used directly in the file name to mitigate potential read/write race\n      // conditions as well as to only require a file existence check\n      runHashFilePath = path.join(runHashBasePath, runHash + '.lock');\n\n      // If the run hash lock file exists, then ngcc was already run against this project state\n      if (await exists(runHashFilePath)) {\n        this.skipProcessing = true;\n\n        return;\n      }\n    } catch {\n      // Any error means an ngcc execution is needed\n    }\n\n    const { status, error } = spawnSync(\n      process.execPath,\n      [\n        this.compilerNgcc.ngccMainFilePath,\n        '--source' /** basePath */,\n        this._nodeModulesDirectory,\n        '--properties' /** propertiesToConsider */,\n        ...this.propertiesToConsider,\n        '--first-only' /** compileAllFormats */,\n        '--create-ivy-entry-points' /** createNewEntryPointFormats */,\n        '--async',\n        '--tsconfig' /** tsConfigPath */,\n        path.normalize(this.projectPath) === defaultTsConfigPath ? '' : this.projectPath,\n        '--use-program-dependencies',\n        '--typings-only' /** typingsOnly */,\n      ],\n      {\n        stdio: ['inherit', process.stderr, process.stderr],\n      },\n    );\n\n    this.skipProcessing = true;\n\n    if (status !== 0) {\n      const errorMessage = error?.message || '';\n      throw new Error(errorMessage + `NGCC failed${errorMessage ? ', see above' : ''}.`);\n    }\n\n    // ngcc was successful so if a run hash was generated, write it for next time\n    if (runHashFilePath) {\n      try {\n        if (!existsSync(runHashBasePath)) {\n          await mkdir(runHashBasePath, { recursive: true });\n        }\n        await writeFile(runHashFilePath, '');\n      } catch {\n        // Errors are non-fatal\n      }\n    }\n  }\n\n  /** Process a module and it's depedencies. */\n  processModule(moduleName: string, resolvedModule: ts.ResolvedModule | ts.ResolvedTypeReferenceDirective): void {\n    const resolvedFileName = resolvedModule.resolvedFileName;\n    if (\n      !resolvedFileName ||\n      moduleName.startsWith('.') ||\n      this.ngccProcessingCache.hasProcessed(moduleName) ||\n      this._entryPointsUrl.includes(ngUrl(moduleName))\n    ) {\n      // Skip when module is unknown, relative, an entrypoint or already processed.\n      return;\n    }\n\n    const packageJsonPath = this.tryResolvePackage(moduleName, resolvedFileName);\n    if (!packageJsonPath) {\n      // add it to processed so the second time round we skip this.\n      this.ngccProcessingCache.markProcessed(moduleName);\n\n      return;\n    }\n\n    // If the package.json is read only we should skip calling NGCC.\n    // With Bazel when running under sandbox the filesystem is read-only.\n    if (isReadOnlyFile(packageJsonPath)) {\n      // add it to processed so the second time round we skip this.\n      this.ngccProcessingCache.markProcessed(moduleName);\n\n      return;\n    }\n\n    this.compilerNgcc.process({\n      basePath: this._nodeModulesDirectory,\n      targetEntryPointPath: path.dirname(packageJsonPath),\n      compileAllFormats: false,\n      typingsOnly: true,\n      propertiesToConsider: this.propertiesToConsider,\n      createNewEntryPointFormats: true,\n      logger: this._logger,\n      tsConfigPath: this.projectPath === defaultTsConfigPath ? undefined : this.projectPath,\n    });\n\n    this.ngccProcessingCache.markProcessed(moduleName);\n  }\n\n  /**\n   * Try resolve a package.json file from the resolved .d.ts file.\n   */\n  private tryResolvePackage(moduleName: string, resolvedFileName: string): string | undefined {\n    try {\n      return require.resolve(`${moduleName}/package.json`, {\n        paths: [resolvedFileName],\n      });\n    } catch {\n      // if it fails this might be a deep import which doesn't have a package.json\n      // Ex: @angular/compiler/src/i18n/i18n_ast/package.json\n      // or local libraries which don't reside in node_modules\n      const packageJsonPath = path.resolve(resolvedFileName, '../package.json');\n\n      return existsSync(packageJsonPath) ? packageJsonPath : undefined;\n    }\n  }\n\n  private findNodeModulesDirectory(startPoint: string): string {\n    let current = startPoint;\n    while (path.dirname(current) !== current) {\n      const nodePath = path.join(current, 'node_modules');\n      if (existsSync(nodePath)) {\n        return nodePath;\n      }\n\n      current = path.dirname(current);\n    }\n\n    throw new Error(`Cannot locate the 'node_modules' directory.`);\n  }\n}\n\nclass NgccLogger implements Logger {\n  level = /** LogLevel.info**/ 1;\n\n  debug(...args: string[]) {\n    log.debug(args.join(' '));\n  }\n\n  info(...args: string[]) {\n    log.info(args.join(' '));\n  }\n\n  warn(...args: string[]) {\n    log.warn(args.join(' '));\n  }\n\n  error(...args: string[]) {\n    log.error(args.join(' '));\n  }\n}\n\nfunction isReadOnlyFile(fileName: string): boolean {\n  try {\n    accessSync(fileName, constants.W_OK);\n\n    return false;\n  } catch {\n    return true;\n  }\n}\n"]}