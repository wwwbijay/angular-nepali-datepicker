{"version":3,"file":"package.transform.js","sourceRoot":"","sources":["../../../src/lib/ng-package/package.transform.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,uDAA4C;AAC5C,2CAA6B;AAC7B,+BAAyE;AACzE,8CAYwB;AAExB,8DAA8D;AAE9D,wCAAkD;AAElD,0CAAwC;AACxC,oCAAoD;AACpD,kDAAoC;AACpC,wCAA+C;AAC/C,2DAAuD;AACvD,mCAUiB;AAGjB;;;;;;;;;;;;;;;;GAgBG;AACI,MAAM,uBAAuB,GAAG,CACrC,OAAe,EACf,OAAyB,EACzB,qBAAgC,EAChC,uBAAkC,EAClC,mBAA8B,EAC9B,EAAE,CAAC,CAAC,OAA+B,EAA0B,EAAE;IAC/D,MAAM,MAAM,GAAG,IAAA,aAAK,EAAC,OAAO,CAAC,CAAC;IAE9B,MAAM,cAAc,GAAG,OAAO,CAAC,KAAK;QAClC,CAAC,CAAC,qBAAqB,CAAC,OAAO,EAAE,OAAO,EAAE,uBAAuB,EAAE,mBAAmB,CAAC;QACvF,CAAC,CAAC,qBAAqB,CAAC,OAAO,EAAE,uBAAuB,EAAE,mBAAmB,CAAC,CAAC;IAEjF,OAAO,OAAO,CAAC,IAAI,CACjB,IAAA,eAAG,EAAC,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IAC/C,qCAAqC;IACrC,IAAA,qBAAS,EAAC,KAAK,CAAC,EAAE;QAChB,MAAM,GAAG,GAAG,IAAA,oCAAgB,EAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAE1C,OAAO,IAAA,WAAI,EAAC,GAAG,CAAC,CAAC,IAAI,CACnB,IAAA,eAAG,EAAC,KAAK,CAAC,EAAE;YACV,MAAM,KAAK,GAAG,IAAI,mBAAW,CAAC,MAAM,CAAC,CAAC;YACtC,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC;YAEnB,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC,CAAC,CACH,CAAC;IACJ,CAAC,CAAC;IACF,oFAAoF;IACpF,IAAA,qBAAS,EACP,KAAK,EAAC,KAAK,EAAC,EAAE;QACZ,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;QAExD,IAAI,cAAc,EAAE;YAClB,IAAI;gBACF,MAAM,IAAA,UAAK,EAAC,IAAI,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;aACxC;YAAC,MAAM,GAAE;SACX;IACH,CAAC,EACD,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,KAAK,CACpB;IACD,4BAA4B;IAC5B,IAAA,eAAG,EAAC,KAAK,CAAC,EAAE;QACV,MAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,CAAC,IAAA,iBAAS,EAAC,SAAS,CAAC,EAAE;YACzB,OAAO,KAAK,CAAC;SACd;QAED,MAAM,KAAK,GAAgB,SAAS,CAAC;QACrC,MAAM,WAAW,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YACnF,MAAM,EAAE,gBAAgB,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAC;YAClD,MAAM,IAAI,GAAG,IAAI,sBAAc,CAC7B,IAAA,aAAK,EAAC,QAAQ,CAAC,EACf,KAAK,CAAC,KAAK,CAAC,gBAAgB,EAC5B,KAAK,CAAC,KAAK,CAAC,mBAAmB,EAC/B,KAAK,CAAC,KAAK,CAAC,qBAAqB,CAClC,CAAC;YACF,IAAI,CAAC,IAAI,GAAG,EAAE,UAAU,EAAE,gBAAgB,EAAE,CAAC;YAC7C,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;YACrB,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAEtB,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC,CAAC;IACF,+CAA+C;IAC/C,qBAAqB;IACrB,gBAAgB;IAChB,cAAc,CACf,CAAC;AACJ,CAAC,CAAC;AAvEW,QAAA,uBAAuB,2BAuElC;AAEF,MAAM,qBAAqB,GAAG,CAC5B,OAAe,EACf,QAA0B,EAC1B,uBAAkC,EAClC,mBAA8B,EAC9B,EAAE,CAAC,CAAC,OAA+B,EAA0B,EAAE;IAC/D,MAAM,4BAA4B,GAAG,sDAAsD,CAAC;IAC5F,MAAM,kBAAkB,GAAG,6DAA6D,CAAC;IACzF,MAAM,0BAA0B,GAAG,oDAAoD,CAAC;IAExF,OAAO,OAAO,CAAC,IAAI,CACjB,IAAA,qBAAS,EAAC,KAAK,CAAC,EAAE;QAChB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,iBAAS,CAAC,CAAC;QAC9C,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,GAAG,IAAA,8BAAe,EAAC,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACnE,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;QAExB,OAAO,YAAY,CAAC,IAAI,CACtB,IAAA,eAAG,EAAC,UAAU,CAAC,EAAE;YACf,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,UAAU,CAAC;YACvC,MAAM,EAAE,gBAAgB,EAAE,GAAG,KAAK,CAAC;YACnC,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACxD,MAAM,EAAE,mBAAmB,EAAE,GAAG,gBAAgB,IAAI,EAAE,CAAC;YACvD,MAAM,UAAU,GAAG,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAA,eAAO,EAAC,IAAA,qBAAc,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACxF,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YAEpF,IAAI,CAAC,gBAAgB,EAAE;gBACrB,IAAI,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,KAAK,EAAE;oBACzC,KAAK,CAAC,SAAS,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;iBACzD;gBAED,IAAI,CAAC,YAAY,EAAE;oBACjB,OAAO;iBACR;aACF;YAED,MAAM,eAAe,GAAG;gBACtB,GAAG,YAAY;gBACf,oEAAoE;gBACpE,yDAAyD;gBACzD,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;aAC/F,CAAC;YAEF,2BAA2B;YAC3B,KAAK,MAAM,EAAE,GAAG,EAAE,IAAI,eAAe,EAAE;gBACrC,gBAAgB,CAAC,MAAM,CAAC,IAAA,mBAAW,EAAC,GAAG,CAAC,CAAC,CAAC;aAC3C;YAED,KAAK,MAAM,UAAU,IAAI,KAAK,CAAC,MAAM,CAAC,oBAAY,CAAC,EAAE;gBACnD,MAAM,OAAO,GAAG,CAAC,GAAG,eAAe,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC7F,IAAI,OAAO,EAAE;oBACX,UAAU,CAAC,KAAK,GAAG,OAAO,CAAC;oBAE3B,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;wBACvB,UAAU,CAAC,KAAK,CAAC,wBAAwB,CAAC,MAAM,CAAC,IAAA,mBAAW,EAAC,GAAG,CAAC,CAAC,CAAC;oBACrE,CAAC,CAAC,CAAC;iBACJ;aACF;YAED,wBAAwB;YACxB,IAAI,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,KAAK,EAAE;gBACzC,KAAK,CAAC,SAAS,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;aACzD;QACH,CAAC,CAAC,EACF,IAAA,wBAAY,EAAC,GAAG,CAAC,EACjB,IAAA,eAAG,EAAC,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,EACtC,IAAA,qBAAS,EAAC,SAAS,CAAC,EACpB,IAAA,iBAAK,EAAC,KAAK,CAAC,CACb,CAAC;IACJ,CAAC,CAAC,EACF,IAAA,qBAAS,EAAC,KAAK,CAAC,EAAE;QAChB,OAAO,IAAA,SAAY,EAAC,KAAK,CAAC,CAAC,IAAI,CAC7B,qBAAqB,CAAC,OAAO,EAAE,uBAAuB,EAAE,mBAAmB,CAAC,EAC5E,IAAA,eAAG,EAAC,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC,EAChD,IAAA,sBAAU,EAAC,KAAK,CAAC,EAAE;YACjB,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACjB,GAAG,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;YAEpC,OAAO,YAAK,CAAC;QACf,CAAC,CAAC,CACH,CAAC;IACJ,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,qBAAqB,GAAG,CAAC,OAAe,EAAE,uBAAkC,EAAE,mBAA8B,EAAE,EAAE,CAAC,CACrH,OAA+B,EACP,EAAE;IAC1B,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAE7B,MAAM,MAAM,GAAG,IAAA,aAAK,EAAC,OAAO,CAAC,CAAC;IAE9B,OAAO,OAAO,CAAC,IAAI;IACjB,mEAAmE;IACnE,uBAAuB;IACvB,wFAAwF;IACxF,mBAAmB,CAAC,mBAAmB,CAAC;IACxC,mCAAmC;IACnC,eAAe,CAAC,MAAM,CAAC,EACvB,IAAA,eAAG,EAAC,KAAK,CAAC,EAAE;QACV,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAChC,GAAG,CAAC,OAAO,CAAC,kFAAkF,CAAC,CAAC;QAChG,GAAG,CAAC,OAAO,CAAC;WACP,KAAK,CAAC,IAAI,CAAC,GAAG;WACd,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QACxB,GAAG,CAAC,OAAO,CAAC,gFAAgF,CAAC,CAAC;QAC9F,MAAM,CAAC,GAAG,cAAM,CAAC,IAAI,CAAC;QACtB,MAAM,CAAC,GAAG,cAAM,CAAC,KAAK,CAAC;QACvB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,YAAY,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IAC3G,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,MAAc,EAAa,EAAE,CACpD,IAAA,WAAI,EACF,IAAA,qBAAS,EAAC,KAAK,EAAC,KAAK,EAAC,EAAE;IACtB,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACnC,MAAM,QAAQ,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,UAAU,EAAE,GAAG,IAAI,CAAC,GAAG,YAAY,CAAC,CAAC;IAElE,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;QAC9B,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI;YACF,MAAM,GAAG,CAAC,MAAM,IAAA,SAAI,EAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;SACzC;QAAC,MAAM,GAAE;QAEV,IAAI,MAAM,EAAE;YACV,MAAM,IAAA,aAAQ,EAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SACvE;KACF;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC,CACH,CAAC;AAEJ,MAAM,mBAAmB,GAAG,CAAC,WAAsB,EAAa,EAAE,CAChE,IAAA,WAAI,EACF,IAAA,qBAAS,EAAC,KAAK,CAAC,EAAE;IAChB,4DAA4D;IAC5D,MAAM,QAAQ,GAAG,IAAI,2BAAQ,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;IACnD,MAAM,WAAW,GAAqB,KAAK,CAAC,MAAM,CAAC,oBAAY,CAAC,CAAC;IAEjE,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;QACpC,kDAAkD;QAClD,MAAM,IAAI,GAAG,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACzC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEvB,KAAK,MAAM,EAAE,GAAG,EAAE,IAAI,UAAU,CAAC,MAAM,CAAC,oBAAY,CAAC,EAAE;YACrD,MAAM,EAAE,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC5B,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACrB,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;SAClC;KACF;IAED,gCAAgC;IAChC,MAAM,MAAM,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,aAAK,CAAC,CAAC;IAElD,oDAAoD;IACpD,OAAO,IAAA,WAAI,EAAC,MAAM,CAAC,CAAC,IAAI,CACtB,IAAA,eAAG,EAAC,CAAC,KAAa,EAAkB,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAA,oBAAY,GAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC,EAC9F,IAAA,kBAAM,EAAC,CAAC,UAA0B,EAAW,EAAE,CAAC,UAAU,CAAC,KAAK,KAAK,MAAM,CAAC,EAC5E,IAAA,qBAAS,EAAC,EAAE,CAAC,EAAE,CACb,IAAA,SAAY,EAAC,EAAE,CAAC,CAAC,IAAI;IACnB,wCAAwC;IACxC,IAAA,eAAG,EAAC,UAAU,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,GAAG,wBAAiB,CAAC,CAAC,EACzD,IAAA,iBAAK,EAAC,KAAK,CAAC,EACZ,WAAW,CACZ,CACF,EACD,IAAA,oBAAQ,EAAC,CAAC,CAAC,EAAE,4EAA4E;IACzF,IAAA,0BAAc,EAAC,KAAK,CAAC,CACtB,CAAC;AACJ,CAAC,CAAC,CACH,CAAC;AAEJ,SAAS,mBAAmB,CAAC,gBAA2B;IACtD,MAAM,KAAK,GAAc,EAAE,CAAC;IAC5B,gBAAgB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QACtC,+FAA+F;QAC/F,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;YACjD,KAAK,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;SACrB;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { DepGraph } from 'dependency-graph';\nimport * as path from 'path';\nimport { NEVER, Observable, from, of as observableOf, pipe } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  debounceTime,\n  defaultIfEmpty,\n  filter,\n  map,\n  mapTo,\n  startWith,\n  switchMap,\n  takeLast,\n  tap,\n} from 'rxjs/operators';\nimport { FileCache } from '../file-system/file-cache';\nimport { createFileWatch } from '../file-system/file-watcher';\nimport { BuildGraph } from '../graph/build-graph';\nimport { STATE_IN_PROGRESS } from '../graph/node';\nimport { Transform } from '../graph/transform';\nimport { colors } from '../utils/color';\nimport { copyFile, rmdir, stat } from '../utils/fs';\nimport * as log from '../utils/log';\nimport { ensureUnixPath } from '../utils/path';\nimport { discoverPackages } from './discover-packages';\nimport {\n  EntryPointNode,\n  GlobCache,\n  PackageNode,\n  byEntryPoint,\n  fileUrl,\n  fileUrlPath,\n  isEntryPoint,\n  isPackage,\n  ngUrl,\n} from './nodes';\nimport { NgPackagrOptions } from './options.di';\n\n/**\n * A transformation for building an npm package:\n *\n *  - discoverPackages\n *  - options\n *  - initTsConfig\n *  - analyzeTsSources (thereby extracting template and stylesheet files)\n *  - for each entry point\n *    - run the entryPontTransform\n *  - writeNpmPackage\n *\n * @param project Project token, reference to `ng-package.json`\n * @param options ng-packagr options\n * @param initTsConfigTransform Transformation initializing the tsconfig of each entry point.\n * @param analyseSourcesTransform Transformation analyzing the typescript source files of each entry point.\n * @param entryPointTransform Transformation for asset rendering and compilation of a single entry point.\n */\nexport const packageTransformFactory = (\n  project: string,\n  options: NgPackagrOptions,\n  initTsConfigTransform: Transform,\n  analyseSourcesTransform: Transform,\n  entryPointTransform: Transform,\n) => (source$: Observable<BuildGraph>): Observable<BuildGraph> => {\n  const pkgUri = ngUrl(project);\n\n  const buildTransform = options.watch\n    ? watchTransformFactory(project, options, analyseSourcesTransform, entryPointTransform)\n    : buildTransformFactory(project, analyseSourcesTransform, entryPointTransform);\n\n  return source$.pipe(\n    tap(() => log.info(`Building Angular Package`)),\n    // Discover packages and entry points\n    switchMap(graph => {\n      const pkg = discoverPackages({ project });\n\n      return from(pkg).pipe(\n        map(value => {\n          const ngPkg = new PackageNode(pkgUri);\n          ngPkg.data = value;\n\n          return graph.put(ngPkg);\n        }),\n      );\n    }),\n    // Clean the primary dest folder (should clean all secondary sub-directory, as well)\n    switchMap(\n      async graph => {\n        const { dest, deleteDestPath } = graph.get(pkgUri).data;\n\n        if (deleteDestPath) {\n          try {\n            await rmdir(dest, { recursive: true });\n          } catch {}\n        }\n      },\n      (graph, _) => graph,\n    ),\n    // Add entry points to graph\n    map(graph => {\n      const foundNode = graph.get(pkgUri);\n      if (!isPackage(foundNode)) {\n        return graph;\n      }\n\n      const ngPkg: PackageNode = foundNode;\n      const entryPoints = [ngPkg.data.primary, ...ngPkg.data.secondaries].map(entryPoint => {\n        const { destinationFiles, moduleId } = entryPoint;\n        const node = new EntryPointNode(\n          ngUrl(moduleId),\n          ngPkg.cache.sourcesFileCache,\n          ngPkg.cache.ngccProcessingCache,\n          ngPkg.cache.moduleResolutionCache,\n        );\n        node.data = { entryPoint, destinationFiles };\n        node.state = 'dirty';\n        ngPkg.dependsOn(node);\n\n        return node;\n      });\n\n      return graph.put(entryPoints);\n    }),\n    // Initialize the tsconfig for each entry point\n    initTsConfigTransform,\n    // perform build\n    buildTransform,\n  );\n};\n\nconst watchTransformFactory = (\n  project: string,\n  _options: NgPackagrOptions,\n  analyseSourcesTransform: Transform,\n  entryPointTransform: Transform,\n) => (source$: Observable<BuildGraph>): Observable<BuildGraph> => {\n  const CompleteWaitingForFileChange = '\\nCompilation complete. Watching for file changes...';\n  const FileChangeDetected = '\\nFile change detected. Starting incremental compilation...';\n  const FailedWaitingForFileChange = '\\nCompilation failed. Watching for file changes...';\n\n  return source$.pipe(\n    switchMap(graph => {\n      const { data, cache } = graph.find(isPackage);\n      const { onFileChange, watcher } = createFileWatch([], [data.dest]);\n      graph.watcher = watcher;\n\n      return onFileChange.pipe(\n        tap(fileChange => {\n          const { filePath, event } = fileChange;\n          const { sourcesFileCache } = cache;\n          const cachedSourceFile = sourcesFileCache.get(filePath);\n          const { declarationFileName } = cachedSourceFile || {};\n          const uriToClean = [filePath, declarationFileName].map(x => fileUrl(ensureUnixPath(x)));\n          const nodesToClean = graph.filter(node => uriToClean.some(uri => uri === node.url));\n\n          if (!cachedSourceFile) {\n            if (event === 'unlink' || event === 'add') {\n              cache.globCache = regenerateGlobCache(sourcesFileCache);\n            }\n\n            if (!nodesToClean) {\n              return;\n            }\n          }\n\n          const allNodesToClean = [\n            ...nodesToClean,\n            // if a non ts file changes we need to clean up its direct dependees\n            // this is mainly done for resources such as html and css\n            ...nodesToClean.filter(node => !node.url.endsWith('.ts')).flatMap(node => [...node.dependees]),\n          ];\n\n          // delete node that changes\n          for (const { url } of allNodesToClean) {\n            sourcesFileCache.delete(fileUrlPath(url));\n          }\n\n          for (const entryPoint of graph.filter(isEntryPoint)) {\n            const isDirty = [...allNodesToClean].some(dependent => entryPoint.dependents.has(dependent));\n            if (isDirty) {\n              entryPoint.state = 'dirty';\n\n              uriToClean.forEach(url => {\n                entryPoint.cache.analysesSourcesFileCache.delete(fileUrlPath(url));\n              });\n            }\n          }\n\n          // Regenerate glob cache\n          if (event === 'unlink' || event === 'add') {\n            cache.globCache = regenerateGlobCache(sourcesFileCache);\n          }\n        }),\n        debounceTime(200),\n        tap(() => log.msg(FileChangeDetected)),\n        startWith(undefined),\n        mapTo(graph),\n      );\n    }),\n    switchMap(graph => {\n      return observableOf(graph).pipe(\n        buildTransformFactory(project, analyseSourcesTransform, entryPointTransform),\n        tap(() => log.msg(CompleteWaitingForFileChange)),\n        catchError(error => {\n          log.error(error);\n          log.msg(FailedWaitingForFileChange);\n\n          return NEVER;\n        }),\n      );\n    }),\n  );\n};\n\nconst buildTransformFactory = (project: string, analyseSourcesTransform: Transform, entryPointTransform: Transform) => (\n  source$: Observable<BuildGraph>,\n): Observable<BuildGraph> => {\n  const startTime = Date.now();\n\n  const pkgUri = ngUrl(project);\n\n  return source$.pipe(\n    // Analyse dependencies and external resources for each entry point\n    analyseSourcesTransform,\n    // Next, run through the entry point transformation (assets rendering, code compilation)\n    scheduleEntryPoints(entryPointTransform),\n    // Write npm package to dest folder\n    writeNpmPackage(pkgUri),\n    tap(graph => {\n      const ngPkg = graph.get(pkgUri);\n      log.success('\\n------------------------------------------------------------------------------');\n      log.success(`Built Angular Package\n - from: ${ngPkg.data.src}\n - to:   ${ngPkg.data.dest}`);\n      log.success('------------------------------------------------------------------------------');\n      const b = colors.bold;\n      const w = colors.white;\n      log.msg(w(`\\nBuild at: ${b(new Date().toISOString())} - Time: ${b('' + (Date.now() - startTime))}ms\\n`));\n    }),\n  );\n};\n\nconst writeNpmPackage = (pkgUri: string): Transform =>\n  pipe(\n    switchMap(async graph => {\n      const { data } = graph.get(pkgUri);\n      const srcFiles = [`${data.src}/LICENSE`, `${data.src}/README.md`];\n\n      for (const srcFile of srcFiles) {\n        let isFile = false;\n        try {\n          isFile = (await stat(srcFile)).isFile();\n        } catch {}\n\n        if (isFile) {\n          await copyFile(srcFile, path.join(data.dest, path.basename(srcFile)));\n        }\n      }\n\n      return graph;\n    }),\n  );\n\nconst scheduleEntryPoints = (epTransform: Transform): Transform =>\n  pipe(\n    concatMap(graph => {\n      // Calculate node/dependency depth and determine build order\n      const depGraph = new DepGraph({ circular: false });\n      const entryPoints: EntryPointNode[] = graph.filter(isEntryPoint);\n\n      for (const entryPoint of entryPoints) {\n        // Remove `ng://` prefix for better error messages\n        const from = entryPoint.url.substring(5);\n        depGraph.addNode(from);\n\n        for (const { url } of entryPoint.filter(isEntryPoint)) {\n          const to = url.substring(5);\n          depGraph.addNode(to);\n          depGraph.addDependency(from, to);\n        }\n      }\n\n      // The array index is the depth.\n      const groups = depGraph.overallOrder().map(ngUrl);\n\n      // Build entry points with lower depth values first.\n      return from(groups).pipe(\n        map((epUrl: string): EntryPointNode => graph.find(byEntryPoint().and(ep => ep.url === epUrl))),\n        filter((entryPoint: EntryPointNode): boolean => entryPoint.state !== 'done'),\n        concatMap(ep =>\n          observableOf(ep).pipe(\n            // Mark the entry point as 'in-progress'\n            tap(entryPoint => (entryPoint.state = STATE_IN_PROGRESS)),\n            mapTo(graph),\n            epTransform,\n          ),\n        ),\n        takeLast(1), // don't use last as sometimes it this will cause 'no elements in sequence',\n        defaultIfEmpty(graph),\n      );\n    }),\n  );\n\nfunction regenerateGlobCache(sourcesFileCache: FileCache): GlobCache {\n  const cache: GlobCache = {};\n  sourcesFileCache.forEach((value, key) => {\n    // ignore node_modules and file which don't exists as they are not used by globbing in our case\n    if (value.exists && !key.includes('node_modules')) {\n      cache[key] = 'FILE';\n    }\n  });\n\n  return cache;\n}"]}