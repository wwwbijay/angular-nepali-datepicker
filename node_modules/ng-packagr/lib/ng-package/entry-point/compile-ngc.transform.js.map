{"version":3,"file":"compile-ngc.transform.js","sourceRoot":"","sources":["../../../../src/lib/ng-package/entry-point/compile-ngc.transform.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8CAAsB;AACtB,2CAA6B;AAC7B,4DAA4B;AAC5B,qDAAwE;AACxE,yEAAoE;AACpE,6DAAyD;AAEzD,gDAAiE;AACjE,iEAA8D;AAC9D,oCAAgF;AAGzE,MAAM,0BAA0B,GAAG,CACxC,mBAAoD,EACpD,OAAyB,EACd,EAAE;IACb,OAAO,IAAA,gCAAoB,EAAC,KAAK,EAAC,KAAK,EAAC,EAAE;;;QACxC,MAAM,OAAO,GAAG,IAAA,aAAG,EAAC;YAClB,UAAU,EAAE,KAAK;YACjB,YAAY,EAAE,KAAK;SACpB,CAAC,CAAC;QAEH,IAAI;YACF,MAAM,UAAU,GAAmB,KAAK,CAAC,IAAI,CAAC,IAAA,8BAAsB,GAAE,CAAC,CAAC;YACxE,MAAM,WAAW,GAAqB,KAAK,CAAC,MAAM,CAAC,oBAAY,CAAC,CAAC;YACjE,sCAAsC;YACtC,MAAM,QAAQ,GAAG,IAAA,uCAA4B,EAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAErF,6BAA6B;YAC7B,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC;YACnE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,iBAAiB,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC;YAC3E,MAAM,EAAE,qBAAqB,EAAE,mBAAmB,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC;YAExE,OAAO,CAAC,KAAK,CACX,yCAAyC,QAAQ,CAAC,OAAO,CAAC,eAAe,IAAI,MAAM,oBAAoB,CACxG,CAAC;YACF,MAAM,aAAa,GAAG,IAAI,8BAAa,CACrC,MAAM,IAAA,iCAAe,GAAE,EACvB,mBAAmB,EACnB,QAAQ,CAAC,OAAO,EAChB,QAAQ,CAAC,OAAO,EAChB,WAAW,CACZ,CAAC;YACF,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,qBAAqB,EAAE;gBACrD,+EAA+E;gBAC/E,MAAM,aAAa,CAAC,OAAO,EAAE,CAAC;aAC/B;YAED,YAAA,UAAU,CAAC,KAAK,EAAC,mBAAmB,uCAAnB,mBAAmB,GAAK,IAAI,mBAAmB,CAC9D,QAAQ,EACR,MAAM,EACN,iBAAiB,EACjB,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,cAAc,CAC/C,EAAC;YAEF,MAAM,IAAA,yCAAkB,EACtB,KAAK,EACL,QAAQ,EACR,qBAAqB,EACrB;gBACE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;gBAC7B,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;gBAC1C,WAAW,EAAE,IAAI;gBACjB,MAAM,EAAE,oBAAE,CAAC,YAAY,CAAC,MAAM;aAC/B,EACD,UAAU,CAAC,KAAK,CAAC,mBAAmB,EACpC,aAAa,EACb,OAAO,CAAC,KAAK,CACd,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,IAAI,EAAE,CAAC;YACf,MAAM,KAAK,CAAC;SACb;QAED,OAAO,CAAC,OAAO,EAAE,CAAC;QAElB,OAAO,KAAK,CAAC;IACf,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAlEW,QAAA,0BAA0B,8BAkErC","sourcesContent":["import ora from 'ora';\nimport * as path from 'path';\nimport ts from 'typescript';\nimport { Transform, transformFromPromise } from '../../graph/transform';\nimport { compileSourceFiles } from '../../ngc/compile-source-files';\nimport { NgccProcessor } from '../../ngc/ngcc-processor';\nimport { StylesheetProcessor as StylesheetProcessorClass } from '../../styles/stylesheet-processor';\nimport { setDependenciesTsConfigPaths } from '../../ts/tsconfig';\nimport { ngccCompilerCli } from '../../utils/ng-compiler-cli';\nimport { EntryPointNode, isEntryPoint, isEntryPointInProgress } from '../nodes';\nimport { NgPackagrOptions } from '../options.di';\n\nexport const compileNgcTransformFactory = (\n  StylesheetProcessor: typeof StylesheetProcessorClass,\n  options: NgPackagrOptions,\n): Transform => {\n  return transformFromPromise(async graph => {\n    const spinner = ora({\n      hideCursor: false,\n      discardStdin: false,\n    });\n\n    try {\n      const entryPoint: EntryPointNode = graph.find(isEntryPointInProgress());\n      const entryPoints: EntryPointNode[] = graph.filter(isEntryPoint);\n      // Add paths mappings for dependencies\n      const tsConfig = setDependenciesTsConfigPaths(entryPoint.data.tsConfig, entryPoints);\n\n      // Compile TypeScript sources\n      const { esm2020, declarations } = entryPoint.data.destinationFiles;\n      const { basePath, cssUrl, styleIncludePaths } = entryPoint.data.entryPoint;\n      const { moduleResolutionCache, ngccProcessingCache } = entryPoint.cache;\n\n      spinner.start(\n        `Compiling with Angular sources in Ivy ${tsConfig.options.compilationMode || 'full'} compilation mode.`,\n      );\n      const ngccProcessor = new NgccProcessor(\n        await ngccCompilerCli(),\n        ngccProcessingCache,\n        tsConfig.project,\n        tsConfig.options,\n        entryPoints,\n      );\n      if (!entryPoint.data.entryPoint.isSecondaryEntryPoint) {\n        // Only run the async version of NGCC during the primary entrypoint processing.\n        await ngccProcessor.process();\n      }\n\n      entryPoint.cache.stylesheetProcessor ??= new StylesheetProcessor(\n        basePath,\n        cssUrl,\n        styleIncludePaths,\n        options.cacheEnabled && options.cacheDirectory,\n      );\n\n      await compileSourceFiles(\n        graph,\n        tsConfig,\n        moduleResolutionCache,\n        {\n          outDir: path.dirname(esm2020),\n          declarationDir: path.dirname(declarations),\n          declaration: true,\n          target: ts.ScriptTarget.ES2020,\n        },\n        entryPoint.cache.stylesheetProcessor,\n        ngccProcessor,\n        options.watch,\n      );\n    } catch (error) {\n      spinner.fail();\n      throw error;\n    }\n\n    spinner.succeed();\n\n    return graph;\n  });\n};\n"]}