{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../src/lib/ng-package/schema.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8CAAyD;AAEzD,kDAAoC;AAEpC,iDAAiD;AACjD,IAAI,YAAY,GAA4B,IAAI,CAAC;AAEjD;;;;;GAKG;AACH,SAAgB,uBAAuB,CAAC,aAAsB;IAC5D,MAAM,QAAQ,GAAG,2BAA2B,EAAE,CAAC;IAC/C,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC;IACxC,IAAI,CAAC,OAAO,EAAE;QACZ,MAAM,IAAI,KAAK,CACb,qDAAqD,4BAA4B,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CACrG,CAAC;KACH;AACH,CAAC;AARD,0DAQC;AAED,SAAS,4BAA4B,CAAC,MAAqB;IACzD,OAAO,MAAM;SACV,GAAG,CAAC,GAAG,CAAC,EAAE;QACT,IAAI,OAAO,GAAG,aAAa,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC;QAC7E,IAAI,GAAG,CAAC,OAAO,KAAK,sBAAsB,EAAE;YAC1C,OAAO,IAAI,KAAM,GAAG,CAAC,MAAc,CAAC,kBAAkB,GAAG,CAAC;SAC3D;QAED,OAAO,OAAO,GAAG,GAAG,CAAC;IACvB,CAAC,CAAC;SACD,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,CAAC;AAED;;GAEG;AACH,SAAS,2BAA2B;IAClC,IAAI,YAAY,KAAK,IAAI,EAAE;QACzB,OAAO,YAAY,CAAC;KACrB;IAED,MAAM,IAAI,GAAG,IAAI,aAAG,CAAC;QACnB,WAAW,EAAE,IAAI;KAClB,CAAC,CAAC;IAEH,sCAAsC;IACtC,IAAI,CAAC,UAAU,CAAC;QACd,OAAO,EAAE,cAAc;QACvB,QAAQ,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,aAAa,EAAE,OAAO,EAAE,EAAE;YAClD,IAAI,MAAM,EAAE;gBACV,GAAG,CAAC,IAAI,CACN,WAAW,OAAO,CAAC,kBAAkB,kBAAkB,OAAO,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CACzG,CAAC;aACH;YAED,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,EAAE,KAAK;KACd,CAAC,CAAC;IAEH,MAAM,mBAAmB,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;IACpE,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;IAEjD,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["import Ajv, { ErrorObject, ValidateFunction } from 'ajv';\nimport { NgPackageConfig } from '../../ng-package.schema';\nimport * as log from '../utils/log';\n\n/** Lazily initialized ajv validator instance. */\nlet ajvValidator: ValidateFunction | null = null;\n\n/**\n * Validates the `ngPackageJson` value against the JSON schema using ajv. An error is thrown if\n * schema errors are found.\n *\n * @param ngPackageJson The value to validate.\n */\nexport function validateNgPackageSchema(ngPackageJson: unknown): asserts ngPackageJson is NgPackageConfig {\n  const validate = getNgPackageSchemaValidator();\n  const isValid = validate(ngPackageJson);\n  if (!isValid) {\n    throw new Error(\n      `Configuration doesn't match the required schema.\\n${formatSchemaValidationErrors(validate.errors)}`,\n    );\n  }\n}\n\nfunction formatSchemaValidationErrors(errors: ErrorObject[]): string {\n  return errors\n    .map(err => {\n      let message = `Data path ${JSON.stringify(err.instancePath)} ${err.message}`;\n      if (err.keyword === 'additionalProperties') {\n        message += ` (${(err.params as any).additionalProperty})`;\n      }\n\n      return message + '.';\n    })\n    .join('\\n');\n}\n\n/**\n * Returns an initialized ajv validator for the ng-package JSON schema.\n */\nfunction getNgPackageSchemaValidator(): ValidateFunction {\n  if (ajvValidator !== null) {\n    return ajvValidator;\n  }\n\n  const _ajv = new Ajv({\n    useDefaults: true,\n  });\n\n  // Add handler for x-deprecated fields\n  _ajv.addKeyword({\n    keyword: 'x-deprecated',\n    validate: (schema, _data, _parentSchema, dataCxt) => {\n      if (schema) {\n        log.warn(\n          `Option \"${dataCxt.parentDataProperty}\" is deprecated${typeof schema == 'string' ? ': ' + schema : '.'}`,\n        );\n      }\n\n      return true;\n    },\n    errors: false,\n  });\n\n  const ngPackageSchemaJson = require('../../ng-package.schema.json');\n  ajvValidator = _ajv.compile(ngPackageSchemaJson);\n\n  return ajvValidator;\n}\n"]}