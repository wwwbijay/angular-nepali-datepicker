{"version":3,"file":"ng-compiler-cli.js","sourceRoot":"","sources":["../../../src/lib/utils/ng-compiler-cli.ts"],"names":[],"mappings":";;;AAAO,KAAK,UAAU,aAAa;IACjC,+EAA+E;IAC/E,kFAAkF;IAClF,gFAAgF;IAChF,uFAAuF;IACvF,+FAA+F;IAC/F,sFAAsF;IACtF,cAAc;IACd,MAAM,iBAAiB,GAAG,MAAM,IAAI,QAAQ,CAAC,yCAAyC,CAAC,EAAE,CAAC;IAE1F,uFAAuF;IACvF,4EAA4E;IAC5E,OAAO,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,OAAO,CAAC;AAC7F,CAAC;AAbD,sCAaC;AAEM,KAAK,UAAU,eAAe;IACnC,MAAM,iBAAiB,GAAG,MAAM,IAAI,QAAQ,CAAC,8CAA8C,CAAC,EAAE,CAAC;IAE/F,OAAO,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,OAAO,CAAC;AACnF,CAAC;AAJD,0CAIC","sourcesContent":["export async function ngCompilerCli(): Promise<typeof import('@angular/compiler-cli')> {\n  // This uses a dynamic import to load `@angular/compiler-cli` which may be ESM.\n  // CommonJS code can load ESM code via a dynamic import. Unfortunately, TypeScript\n  // will currently, unconditionally downlevel dynamic import into a require call.\n  // require calls cannot load ESM code and will result in a runtime error. To workaround\n  // this, a Function constructor is used to prevent TypeScript from changing the dynamic import.\n  // Once TypeScript provides support for keeping the dynamic import this workaround can\n  // be dropped.\n  const compilerCliModule = await new Function(`return import('@angular/compiler-cli');`)();\n\n  // If it is not ESM then the functions needed will be stored in the `default` property.\n  // This conditional can be removed when `@angular/compiler-cli` is ESM only.\n  return compilerCliModule.readConfiguration ? compilerCliModule : compilerCliModule.default;\n}\n\nexport async function ngccCompilerCli(): Promise<typeof import('@angular/compiler-cli/ngcc')> {\n  const compilerCliModule = await new Function(`return import('@angular/compiler-cli/ngcc');`)();\n\n  return compilerCliModule.process ? compilerCliModule : compilerCliModule.default;\n}\n"]}