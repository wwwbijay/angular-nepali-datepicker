import { OnInit, ElementRef } from '@angular/core';
import { NpDatePickerService } from './np-datepicker.service';
import { ControlValueAccessor } from '@angular/forms';
import { NepaliDate, DaysMapping, MonthMapping, DateFormatter } from './types';
import * as i0 from "@angular/core";
export declare class NpDatePickerComponent implements OnInit, ControlValueAccessor {
    _nepaliDate: NpDatePickerService;
    private eRef;
    nepaliDateToday: NepaliDate;
    currentNepaliDate: NepaliDate;
    selectedDate: NepaliDate;
    formattedDate: string;
    currentDate: any;
    displayDate: string;
    years: number[];
    currentMonthData: any;
    daysMapping: DaysMapping;
    monthsMapping: MonthMapping;
    isOpen: boolean;
    hideInput: boolean;
    alwaysVisible: boolean;
    theme: string;
    language: 'en' | 'ne';
    hasFuture: Boolean;
    format: string;
    monthDisplayType: 'default' | 'modern' | 'short';
    dayDisplayType: 'default' | 'short';
    dateFormatter: DateFormatter;
    initialized: boolean;
    clickout(event: any): void;
    constructor(_nepaliDate: NpDatePickerService, eRef: ElementRef);
    ngOnInit(): void;
    populateYears(): void;
    selectYear(e: any): void;
    selectMonth(e: any): void;
    resetCurrentMonthData(): void;
    formatValue(): void;
    propagateChange: (_: any) => void;
    propagateTouch: (_: any) => void;
    writeValue(value: any): void;
    registerOnTouched(): void;
    registerOnChange(fn: any): void;
    setCurrentDate(): void;
    setCurrentMonthData(): void;
    setMonthDataBefore(day: any, date: any): void;
    setMonthDataAfter(day: any, date: any, currentMonthMaxValue: any): void;
    createEmptySpaces(): void;
    selectDate(day: number): void;
    prevMonth(): void;
    nextMonth(): void;
    toggleOpen(): void;
    open(): void;
    close(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NpDatePickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NpDatePickerComponent, "np-datepicker", never, { "theme": "theme"; "language": "language"; "hasFuture": "hasFuture"; "format": "format"; }, {}, never, never>;
}
